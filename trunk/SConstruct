
EnsureSConsVersion(0,14);


import os;
import string;
import sys
import detect
import version

palmos=False;
win32=False

win32cross=True
win32msvc=False
#env = Environment(CC='arm-palmos-gcc',CXX='arm-palmos-g++' , RANLIB='arm-palmos-ranlib', AR='arm-palmos-ar', CPPPATH=['#/types','#.']);


if (win32 and win32cross):
	env = Environment(CPPPATH=['#/types','#gui','#.'],CPPFLAGS=['-DANSIC_LIBS_ENABLED','-g3','-Wall','-fstrict-aliasing'],CXX='i586-mingw32msvc-g++',RANLIB='i586-mingw32msvc-ranlib',LD='i586-mingw32msvc-ld',CC='i586-mingw32msvc-gcc',AR='i586-mingw32msvc-ar' );
	version.enables+=['WIN32_ENABLED'];
	version.enables+=['VST_ENABLED'];
else:
	env = Environment(CPPPATH=['#/types','#gui','#.'],CPPFLAGS=['-DANSIC_LIBS_ENABLED','-DPOSIX_ENABLED'],ENV=os.environ);
	env.Append(LIBS=['pthread']);
	
	version.enables+=['LADSPA_ENABLED'];

env.Append(LIBS=['drivers','portaudio','interface','gui_custom','gui_drivers','gui_bundles','gui_widgets','gui_containers','gui_base','gui_string','gui_signals','editor','plugins','engine','dsp','types']);

version.enables+=['DRIVER_PORTAUDIO_ENABLED'];

opts=Options()
opts.Add('optimize', 'Optimize.', 0)
opts.Add('debug', 'Add debug symbols.', 1)
opts.Add('prefix', 'The installation prefix', '/usr/local/')
opts.Add('meta_as_alt', 'META Key works as ALT (MAC keyboards)', 0)


opts.Update(env)
Help(opts.GenerateHelpText(env))

if (palmos):
	env.Append(CPPPATH=['/home/red/tmp/sdk-5r3/include/']);
	env.Append(CPPFLAGS=['-DNATIVE','-mcpu=arm9tdmi','-nostartfiles','-mshort-load-bytes','-ffixed-r9','-ffixed-r8','-mpic-register=r10','-msingle-pic-base','-fPIC','-fno-rtti']);
elif (win32cross and win32):

	env.Append(CPPFLAGS=['-I/usr/i586-mingw32msvc/include/SDL','-D_REENTRANT','-DWINDOWS_ENABLED','-Wno-sign-compare']);
	env.Append(LINKFLAGS=['-L/usr/i586-mingw32msvc/lib','-mwindows']);
	env.Append(LIBS=['mingw32','SDLmain','SDL']);

elif (win32):
	if (win32msvc):

		env.Append(CPPFLAGS=['/IC:\Program Files\Microsoft Visual Studio 8\VC\include\SDL','/D_REENTRANT','/DWINDOWS_ENABLED','/Zi','/Yd','/MT','/Gd']);
	        env.Append(LIBS=['SDLmain','SDL']);
		env.Append(LINKFLAGS=['/FORCE:MULTIPLE','/DEBUG']);
        else:
		env.Append(CPPFLAGS=['-IC:\\MingW\\include\\SDL','-D_REENTRANT','-DWINDOWS_ENABLED']);
		env.Append(LINKFLAGS=['-mwindows']);
	        env.Append(LIBS=['mingw32','SDLmain','SDL']);
		env.icon_obj="cticon.o"

else:
	#UNIX, needs some detection, detect SDL
	errorval=os.system("sdl-config --version");

        if (errorval):
                print "Error: cant execute sdl-config, make sure SDL is installed";
                exit(255);
	else:
		print("libSDL Detected");

	env.ParseConfig('sdl-config --cflags --libs')

	# detect png
	errorval=os.system("pkg-config libpng --modversion");

        if (errorval):
                print "Error: cant execute pkg-config to check for libpng, make sure pkg-config and libpng are installed";
                exit(255);
	else:
		print("libPNG Detected");

	env.ParseConfig('pkg-config libpng --cflags --libs')

	env.Append(CPPFLAGS=['-fno-exceptions','-Wno-sign-compare']);
#	env['CXX']='g++-2.95'


env.Append(LIBPATH=['#drivers','#drivers/portaudio','#interface','#gui_custom/','#gui/base','#gui/drivers','#gui/signals','#gui/containers','#gui/string','#gui/widgets','#gui/bundles','#editor','#plugins','#engine','#song','#dsp','#types']);


if (not win32msvc):
	print env['optimize']
	if (int(env['debug']) and not int(env['optimize'])):
	        env.Append(CXXFLAGS=['-g3','-Wall']);
	if (int(env['optimize'])):
		env.Append(CXXFLAGS=['-O2','-ffast-math']);

if ((env['meta_as_alt'])):
	env.Append(CXXFLAGS=['-DMETA_AS_ALT']);

env.use_asio=False
env.bin_targets=[]
env.__class__.find_source_files = detect.find_source_files

env.Append(CXXFLAGS=['-DGUI_EXTERNAL_STRING="\\\"types/rstring.h\\\""']);
Export('env');

version.save();

SConscript('gui/SCsub');
SConscript('types/SCsub');
SConscript('dsp/SCsub');
SConscript('engine/SCsub');
SConscript('editor/SCsub');
SConscript('plugins/SCsub');
SConscript('gui/SCsub');
SConscript('gui_custom/SCsub');
SConscript('interface/SCsub');
SConscript('drivers/SCsub');
SConscript('program/SCsub');


if env['prefix']:
        dst_target = env.Install(env['prefix']+'/bin', env.bin_targets)
        env.Alias('install', dst_target )

