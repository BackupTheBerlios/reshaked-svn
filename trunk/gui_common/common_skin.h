//
// C++ Interface: rsskin
//
// Description: 
//
//
// Author: Juan Linietsky <reshaked@gmail.com>, (C) 2007
//
// Copyright: See COPYING file that comes with this distribution
//
//
#ifndef RESHAKEDRSSKIN_H
#define RESHAKEDRSSKIN_H

#include "base/skin.h"
#include "base/painter.h"
#include "pixmap_data.h"

#define MAX_LAYER_COLORS 16

enum CommonStyleBoxList{
	
	COMMON_SB_FIRST=GUI::SB_MAX,
	
	SB_LAYER_STYLE_NODE_0,
	SB_LAYER_STYLE_NODE_1,
	SB_LAYER_STYLE_NODE_2,
	SB_LAYER_STYLE_NODE_3,
	SB_LAYER_STYLE_NODE_4,
	SB_LAYER_STYLE_NODE_5,
	SB_LAYER_STYLE_NODE_6,
	SB_LAYER_STYLE_NODE_7,
	SB_LAYER_STYLE_NODE_8,
	SB_LAYER_STYLE_NODE_9,
	SB_LAYER_STYLE_NODE_10,
	SB_LAYER_STYLE_NODE_11,
	SB_LAYER_STYLE_NODE_12,
	SB_LAYER_STYLE_NODE_13,
	SB_LAYER_STYLE_NODE_14,
	SB_LAYER_STYLE_NODE_15,	     	
	SB_LAYER_STYLE_NODE_ALL,
	
	SB_LAYER_STYLE_BG_0,
	SB_LAYER_STYLE_BG_1,
	SB_LAYER_STYLE_BG_2,
	SB_LAYER_STYLE_BG_3,
	SB_LAYER_STYLE_BG_4,
	SB_LAYER_STYLE_BG_5,
	SB_LAYER_STYLE_BG_6,
	SB_LAYER_STYLE_BG_7,
	SB_LAYER_STYLE_BG_8,
	SB_LAYER_STYLE_BG_9,
	SB_LAYER_STYLE_BG_10,
	SB_LAYER_STYLE_BG_11,
	SB_LAYER_STYLE_BG_12,
	SB_LAYER_STYLE_BG_13,
	SB_LAYER_STYLE_BG_14,
	SB_LAYER_STYLE_BG_15,	     	
	SB_LAYER_STYLE_BG_ALL,
	
     	SB_GRAPH_AUDIO_PORT,
     	SB_GRAPH_EVENT_PORT,
     	SB_GRAPH_CONTROL_PORT,	
     	
     	SB_NODEUI_LABEL,
     	SB_NODEUI_VLABEL,
     	SB_NODEUI_VALUE,
     	
	SB_NODEUI_REVERB_IR_BG,
	
	COMMON_SB_MAX
};
	
enum CommonColorList {
		
	COMMON_COLOR_FIRST=GUI::COLOR_MAX,
	COLOR_NODE_CHOOSER_BG,
	COLOR_NODE_CHOOSER_BG_SELECTED,
	COLOR_NODE_CHOOSER_FONT_NAME,
	COLOR_NODE_CHOOSER_FONT_DESCRIPTION,
	COLOR_NODE_CHOOSER_SEPARATOR,
	COLOR_GRAPH_NODE_NAME_FONT,
	COLOR_GRAPH_NODE_AUDIO_PORT_FONT,
	COLOR_GRAPH_NODE_EVENT_PORT_FONT,
	COLOR_GRAPH_NODE_CONTROL_PORT_FONT,
	COLOR_GRAPH_AUDIO_CABLE,
	COLOR_GRAPH_EVENT_CABLE,
	COLOR_GRAPH_CONTROL_CABLE,
	COLOR_GRAPH_CONNECTING_CABLE,
	COLOR_NODEUI_LABEL_FONT,
	COLOR_NODEUI_VALUE_FONT,
	COLOR_NODEUI_REVERB_IR_IMPULSE,
	COMMON_COLOR_MAX
};

enum CommonConstantList {

	COMMON_C_FIRST=GUI::C_MAX,
	C_NODE_CHOOSER_ITEM_MARGIN,
	C_NODE_CHOOSER_ITEM_DESCRIPTION_MARGIN,
	C_NODE_CHOOSER_ITEM_INTERNAL_SEPARATION,
	C_GRAPH_NODE_VSPACING,	
	C_GRAPH_NODE_HSPACING,	
	C_GENERIC_NODE_UI_ROW_SIZE,
	C_GENERIC_NODE_UI_ROW_MAX,
	C_GENERIC_NODE_UI_KNOB_MARGIN,
	C_GENERIC_NODE_UI_SCROLL_HEIGHT,
	C_GENERIC_NODE_UI_VSLIDER_MIN_HEIGHT,
	C_GENERIC_NODE_UI_VSLIDER_MARGIN,		
	C_NODEUI_REVERB_IR_HEIGHT,
	COMMON_C_MAX

};
	
enum CommonFontList {
	COMMON_FONT_FIRST=GUI::FONT_MAX,
	FONT_NODE_CHOOSER_NAME,
	FONT_NODE_CHOOSER_DESCRIPTION,	
	
	FONT_GRAPH_NODE_PORT,
	FONT_GRAPH_NODE_NAME,
	
	FONT_NODEUI_LABEL,
	FONT_NODEUI_VALUE,
	
	COMMON_FONT_MAX
};

enum CommonBitmapList {

	COMMON_BITMAP_FIRST=GUI::BITMAP_MAX,
	
	BITMAP_ICON_AUDIO,
	BITMAP_ICON_FILE_DISK,
	BITMAP_ICON_FILE_FOLDER,
	BITMAP_ICON_HELP,
	BITMAP_ICON_PREFERENCES,
	BITMAP_ICON_UNDO,
	BITMAP_ICON_REDO,
	BITMAP_ICON_ADD,
	BITMAP_ICON_INFO,
	BITMAP_ICON_TIME,
		
	BITMAP_CONTROL_PLAY,
	BITMAP_CONTROL_LOOP,
	BITMAP_CONTROL_PAUSE,
	BITMAP_CONTROL_STOP,
	BITMAP_CONTROL_FF,
	BITMAP_CONTROL_RW,
	BITMAP_CONTROL_REC,
	BITMAP_CONTROL_REC_AUTO,
	
	BITMAP_GRAPH_JACK,
	BITMAP_GRAPH_NODE_EDIT,
	BITMAP_GRAPH_NODE_EDIT_HOVER,
	BITMAP_GRAPH_NODE_CLOSE,
	BITMAP_GRAPH_NODE_CLOSE_HOVER,
	BITMAP_GRAPH_NODE_OPTIONS,
	BITMAP_GRAPH_NODE_OPTIONS_HOVER,
	BITMAP_GRAPH_NODE_PRESET,
	BITMAP_GRAPH_NODE_RENAME,
	BITMAP_GRAPH_NODE_CONTROL_EDIT,
	BITMAP_GRAPH_NODE_SKIP,
	BITMAP_GRAPH_NODE_LAYERS,
	
	BITMAP_LAYER_BUTTON_0,
	BITMAP_LAYER_BUTTON_1,
	BITMAP_LAYER_BUTTON_2,
	BITMAP_LAYER_BUTTON_3,
	BITMAP_LAYER_BUTTON_4,
	BITMAP_LAYER_BUTTON_5,
	BITMAP_LAYER_BUTTON_6,
	BITMAP_LAYER_BUTTON_7,
	BITMAP_LAYER_BUTTON_8,
	BITMAP_LAYER_BUTTON_9,
	BITMAP_LAYER_BUTTON_10,
	BITMAP_LAYER_BUTTON_11,
	BITMAP_LAYER_BUTTON_12,
	BITMAP_LAYER_BUTTON_13,
	BITMAP_LAYER_BUTTON_14,
	BITMAP_LAYER_BUTTON_15,
	BITMAP_LAYER_BUTTON_ALL,
	
	BITMAP_LAYER_BUTTON_0_HOVER,
	BITMAP_LAYER_BUTTON_1_HOVER,
	BITMAP_LAYER_BUTTON_2_HOVER,
	BITMAP_LAYER_BUTTON_3_HOVER,
	BITMAP_LAYER_BUTTON_4_HOVER,
	BITMAP_LAYER_BUTTON_5_HOVER,
	BITMAP_LAYER_BUTTON_6_HOVER,
	BITMAP_LAYER_BUTTON_7_HOVER,
	BITMAP_LAYER_BUTTON_8_HOVER,
	BITMAP_LAYER_BUTTON_9_HOVER,
	BITMAP_LAYER_BUTTON_10_HOVER,
	BITMAP_LAYER_BUTTON_11_HOVER,
	BITMAP_LAYER_BUTTON_12_HOVER,
	BITMAP_LAYER_BUTTON_13_HOVER,
	BITMAP_LAYER_BUTTON_14_HOVER,
	BITMAP_LAYER_BUTTON_15_HOVER,
	BITMAP_LAYER_BUTTON_ALL_HOVER,
		
	BITMAP_LAYER_BUTTON_0_PRESSED,
	BITMAP_LAYER_BUTTON_1_PRESSED,
	BITMAP_LAYER_BUTTON_2_PRESSED,
	BITMAP_LAYER_BUTTON_3_PRESSED,
	BITMAP_LAYER_BUTTON_4_PRESSED,
	BITMAP_LAYER_BUTTON_5_PRESSED,
	BITMAP_LAYER_BUTTON_6_PRESSED,
	BITMAP_LAYER_BUTTON_7_PRESSED,
	BITMAP_LAYER_BUTTON_8_PRESSED,
	BITMAP_LAYER_BUTTON_9_PRESSED,
	BITMAP_LAYER_BUTTON_10_PRESSED,
	BITMAP_LAYER_BUTTON_11_PRESSED,
	BITMAP_LAYER_BUTTON_12_PRESSED,
	BITMAP_LAYER_BUTTON_13_PRESSED,
	BITMAP_LAYER_BUTTON_14_PRESSED,
	BITMAP_LAYER_BUTTON_15_PRESSED,
	BITMAP_LAYER_BUTTON_ALL_PRESSED,
		
		
	BITMAP_NODE_HW_AUDIO_IN,
	BITMAP_NODE_HW_AUDIO_OUT,
	BITMAP_NODE_HW_EVENT_IN,
	BITMAP_NODE_HW_EVENT_OUT,
	BITMAP_NODE_AMP,
	BITMAP_NODE_REVERB,
		
	COMMON_BITMAP_MAX
};

/**
	@author Juan Linietsky <reshaked@gmail.com>
*/
class CommonSkin : public GUI::Skin {
	
	GUI::Painter *painter;
	void set_default_extra();
	
	GUI::FontID bar_font;
	GUI::FontID beat_font;
	GUI::FontID small_font;
	
	GUI::FontID load_number_font(PixmapDataList p_bitmap);
	GUI::FontID load_fixed_font(PixmapDataList p_pixmap,int p_from,int p_to);
	
public:
	
	
    CommonSkin(GUI::Painter *p_painter);
    ~CommonSkin();

};



#endif
